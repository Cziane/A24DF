{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "czweatherdf"
		},
		"WeatherForcastSQLDatabase_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'WeatherForcastSQLDatabase'"
		},
		"WeatherStorageAccount_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'WeatherStorageAccount'"
		},
		"OpenMEteoAPI_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.open-meteo.com/"
		},
		"OpenMeteo_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.open-meteo.com/"
		},
		"WeatherForcastSQLDatabase_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "czweather.database.windows.net"
		},
		"WeatherForcastSQLDatabase_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "weatherfc"
		},
		"WeatherForcastSQLDatabase_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "dsti_admin"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/OpenMEteoAPI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "WebConnection",
				"typeProperties": {
					"url": "[parameters('OpenMEteoAPI_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenMeteo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('OpenMeteo_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherForcastSQLDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "A Database with major cities coordinates and weather forcast",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('WeatherForcastSQLDatabase_properties_typeProperties_server')]",
					"database": "[parameters('WeatherForcastSQLDatabase_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('WeatherForcastSQLDatabase_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('WeatherForcastSQLDatabase_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherStorageAccount')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "A storage Account to store generated map",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('WeatherStorageAccount_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CityTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WeatherForcastSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "city_name",
						"type": "nvarchar"
					},
					{
						"name": "latitude",
						"type": "float",
						"precision": 15
					},
					{
						"name": "longitude",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "major_french_cities"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WeatherForcastSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherForcastPopulate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetCityList",
						"description": "Get the cities informations",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT id, city_name, latitude, longitude FROM major_french_cities\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "CityTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachCity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetCityList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetCityList').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "CallWeatherAPI",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {},
										"url": "@concat('https://api.open-meteo.com/v1/forecast?latitude=', string(item().latitude), '&longitude=', string(item().longitude), '&daily=temperature_2m_max&timezone=Europe%2FBerlin')"
									}
								},
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CallWeatherAPI",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_insert_daily_forecast_from_strings]",
										"storedProcedureParameters": {
											"city_id": {
												"value": {
													"value": "@item().id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"forecast_dates": {
												"value": {
													"value": "@join(activity('CallWeatherAPI').output.daily.time, ',')",
													"type": "Expression"
												},
												"type": "String"
											},
											"temperatures": {
												"value": {
													"value": "@join(activity('CallWeatherAPI').output.daily.temperature_2m_max, ',')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "WeatherForcastSQLDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CityTable')]",
				"[concat(variables('factoryId'), '/linkedServices/OpenMEteoAPI')]",
				"[concat(variables('factoryId'), '/linkedServices/WeatherForcastSQLDatabase')]"
			]
		}
	]
}